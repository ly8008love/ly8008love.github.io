<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>909</title>
      <link href="/2021/07/25/909/"/>
      <url>/2021/07/25/909/</url>
      
        <content type="html"><![CDATA[<h2 id="afdaf"><a href="#afdaf" class="headerlink" title="afdaf"></a>afdaf</h2><p>阿凡达规范起来看</p><p><img src="../../../../images/909/image-20210725232211372.png" alt="image-20210725232211372"></p>]]></content>
      
      
      <categories>
          
          <category> 333 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 222 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2021/07/25/test/"/>
      <url>/2021/07/25/test/</url>
      
        <content type="html"><![CDATA[<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><h3 id="ooo"><a href="#ooo" class="headerlink" title="ooo"></a>ooo</h3><p>dfa1</p><p><img src="/.io//image-20210725231603939.png" alt="image-20210725231603939"></p>]]></content>
      
      
      <categories>
          
          <category> 红队 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap脚本合集</title>
      <link href="/2021/07/08/nmap-jiao-ben-he-ji/"/>
      <url>/2021/07/08/nmap-jiao-ben-he-ji/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>NSE Script 名</th><th>网络端口</th><th>服务/协议</th><th>类别</th></tr></thead><tbody><tr><td><a href="https://nmap.org/nsedoc/scripts/acarsd-info.html">acarsd-info</a></td><td>2202</td><td>acarsd, tcp</td><td>safe, discovery</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/address-info.html">address-info</a></td><td>–</td><td>–</td><td>default, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/afp-brute.html">afp-brute</a></td><td>548</td><td>afp</td><td>intrusive, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/afp-ls.html">afp-ls</a></td><td>548</td><td>afp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/afp-path-vuln.html">afp-path-vuln</a></td><td>548</td><td>tcp</td><td>exploit, intrusive, vuln</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/afp-serverinfo.html">afp-serverinfo</a></td><td>548</td><td>afp</td><td>default, discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/afp-showmount.html">afp-showmount</a></td><td>548</td><td>tcp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/ajp-auth.html">ajp-auth</a></td><td>8009</td><td>ajp13, tcp</td><td>default, auth, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/ajp-brute.html">ajp-brute</a></td><td>8009</td><td>ajp13, tcp</td><td>intrusive, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/ajp-headers.html">ajp-headers</a></td><td>8009</td><td>ajp13, tcp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/ajp-methods.html">ajp-methods</a></td><td>8009</td><td>ajp13, tcp</td><td>default, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/ajp-request.html">ajp-request</a></td><td>8009</td><td>ajp13, tcp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/allseeingeye-info.html">allseeingeye-info</a></td><td>1258, 2126, 3123, 12444, 13200, 23196, 26000, 27138, 27244, 27777, 28138</td><td>allseeingeye, udp</td><td>discovery, safe, version</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/amqp-info.html">amqp-info</a></td><td>5672</td><td>amqp, tcp</td><td>default, discovery, safe, version</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/asn-query.html">asn-query</a></td><td>–</td><td>–</td><td>discovery, external, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/auth-owners.html">auth-owners</a></td><td>113</td><td>auth</td><td>default, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/auth-spoof.html">auth-spoof</a></td><td>113</td><td>auth</td><td>malware, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/backorifice-brute.html">backorifice-brute</a></td><td>151-222, 1024-1512, 25252, 31337</td><td>udp</td><td>intrusive, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/backorifice-info.html">backorifice-info</a></td><td>151-222, 1024-1512, 25252, 31337</td><td>udp</td><td>default, discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/bacnet-info.html">bacnet-info</a></td><td>47808</td><td>bacnet, tcp, udp</td><td>discovery, version</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/banner.html">banner</a></td><td>any</td><td>any</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/bitcoin-getaddr.html">bitcoin-getaddr</a></td><td>8333</td><td>bitcoin, tcp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/bitcoin-info.html">bitcoin-info</a></td><td>8333</td><td>bitcoin, tcp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/bitcoinrpc-info.html">bitcoinrpc-info</a></td><td>8332</td><td>–</td><td>default, discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/bittorrent-discovery.html">bittorrent-discovery</a></td><td>–</td><td>–</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/bjnp-discover.html">bjnp-discover</a></td><td>8611, 8612</td><td>udp</td><td>safe, discovery</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-ataoe-discover.html">broadcast-ataoe-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-avahi-dos.html">broadcast-avahi-dos</a></td><td>–</td><td>–</td><td>broadcast, dos, intrusive, vuln</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-bjnp-discover.html">broadcast-bjnp-discover</a></td><td>–</td><td>–</td><td>safe, broadcast</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-db2-discover.html">broadcast-db2-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-dhcp6-discover.html">broadcast-dhcp6-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-dhcp-discover.html">broadcast-dhcp-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-dns-service-discovery.html">broadcast-dns-service-discovery</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-dropbox-listener.html">broadcast-dropbox-listener</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-eigrp-discovery.html">broadcast-eigrp-discovery</a></td><td>–</td><td>–</td><td>discovery, broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-hid-discoveryd.html">broadcast-hid-discoveryd</a></td><td>–</td><td>–</td><td>discovery, broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-igmp-discovery.html">broadcast-igmp-discovery</a></td><td>–</td><td>–</td><td>discovery, safe, broadcast</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-jenkins-discover.html">broadcast-jenkins-discover</a></td><td>–</td><td>–</td><td>discovery, broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-listener.html">broadcast-listener</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-ms-sql-discover.html">broadcast-ms-sql-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-netbios-master-browser.html">broadcast-netbios-master-browser</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-networker-discover.html">broadcast-networker-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-novell-locate.html">broadcast-novell-locate</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-ospf2-discover.html">broadcast-ospf2-discover</a></td><td>–</td><td>–</td><td>broadcast, discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-pc-anywhere.html">broadcast-pc-anywhere</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-pc-duo.html">broadcast-pc-duo</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-pim-discovery.html">broadcast-pim-discovery</a></td><td>–</td><td>–</td><td>discovery, safe, broadcast</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-ping.html">broadcast-ping</a></td><td>–</td><td>–</td><td>discovery, safe, broadcast</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-pppoe-discover.html">broadcast-pppoe-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-rip-discover.html">broadcast-rip-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-ripng-discover.html">broadcast-ripng-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-sonicwall-discover.html">broadcast-sonicwall-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-sybase-asa-discover.html">broadcast-sybase-asa-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-tellstick-discover.html">broadcast-tellstick-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-upnp-info.html">broadcast-upnp-info</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-versant-locate.html">broadcast-versant-locate</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-wake-on-lan.html">broadcast-wake-on-lan</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-wpad-discover.html">broadcast-wpad-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-wsdd-discover.html">broadcast-wsdd-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/broadcast-xdmcp-discover.html">broadcast-xdmcp-discover</a></td><td>–</td><td>–</td><td>broadcast, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/cassandra-brute.html">cassandra-brute</a></td><td>9160</td><td>cassandra</td><td>intrusive, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/cassandra-info.html">cassandra-info</a></td><td>9160</td><td>cassandra</td><td>default, discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/cccam-version.html">cccam-version</a></td><td>10000, 10001, 12000, 12001, 16000, 16001</td><td>cccam</td><td>version</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/cics-enum.html">cics-enum</a></td><td>23, 992</td><td>tn3270</td><td>intrusive, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/cics-info.html">cics-info</a></td><td>23, 992</td><td>tn3270</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/cics-user-brute.html">cics-user-brute</a></td><td>23, 992</td><td>tn3270</td><td>intrusive, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/cics-user-enum.html">cics-user-enum</a></td><td>23, 992</td><td>tn3270</td><td>intrusive, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/citrix-brute-xml.html">citrix-brute-xml</a></td><td>8080, 80, 443</td><td>http, https, tcp</td><td>intrusive, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/citrix-enum-apps.html">citrix-enum-apps</a></td><td>1604</td><td>udp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/citrix-enum-apps-xml.html">citrix-enum-apps-xml</a></td><td>8080, 80, 443</td><td>http, https, tcp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/citrix-enum-servers.html">citrix-enum-servers</a></td><td>1604</td><td>udp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/citrix-enum-servers-xml.html">citrix-enum-servers-xml</a></td><td>8080, 80, 443</td><td>http, https, tcp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/clamav-exec.html">clamav-exec</a></td><td>3310</td><td>clam</td><td>exploit, vuln</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/clock-skew.html">clock-skew</a></td><td>various</td><td>–</td><td>default, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/coap-resources.html">coap-resources</a></td><td>5683</td><td>coap, udp</td><td>safe, discovery</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/couchdb-databases.html">couchdb-databases</a></td><td>5984</td><td>–</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/couchdb-stats.html">couchdb-stats</a></td><td>5984</td><td>–</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/creds-summary.html">creds-summary</a></td><td>–</td><td>–</td><td>auth, default, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/cups-info.html">cups-info</a></td><td>631</td><td>ipp, tcp</td><td>safe, discovery</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/cups-queue-info.html">cups-queue-info</a></td><td>631</td><td>ipp, tcp</td><td>safe, discovery</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/cvs-brute.html">cvs-brute</a></td><td>2401</td><td>cvspserver</td><td>intrusive, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/cvs-brute-repository.html">cvs-brute-repository</a></td><td>2401</td><td>cvspserver</td><td>intrusive, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/daap-get-library.html">daap-get-library</a></td><td>3689</td><td>daap</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/daytime.html">daytime</a></td><td>13</td><td>daytime, tcp, udp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/db2-das-info.html">db2-das-info</a></td><td>523</td><td>tcp, udp</td><td>safe, discovery, version</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/deluge-rpc-brute.html">deluge-rpc-brute</a></td><td>58846</td><td>deluge-rpc</td><td>intrusive, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/dhcp-discover.html">dhcp-discover</a></td><td>67</td><td>udp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/dicom-brute.html">dicom-brute</a></td><td>104, 2345, 2761, 2762, 4242, 11112</td><td>dicom, tcp</td><td>auth, brute</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/dicom-ping.html">dicom-ping</a></td><td>104, 2345, 2761, 2762, 4242, 11112</td><td>dicom, tcp</td><td>discovery, default, safe, auth</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/dict-info.html">dict-info</a></td><td>2628</td><td>dict, tcp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/distcc-cve2004-2687.html">distcc-cve2004-2687</a></td><td>3632</td><td>distcc</td><td>exploit, intrusive, vuln</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/dns-blacklist.html">dns-blacklist</a></td><td>–</td><td>–</td><td>external, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/dns-brute.html">dns-brute</a></td><td>–</td><td>–</td><td>intrusive, discovery</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/dns-cache-snoop.html">dns-cache-snoop</a></td><td>53</td><td>dns, udp</td><td>intrusive, discovery</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/dns-check-zone.html">dns-check-zone</a></td><td>–</td><td>–</td><td>discovery, safe, external</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/dns-client-subnet-scan.html">dns-client-subnet-scan</a></td><td>53</td><td>dns, udp, tcp</td><td>discovery, safe</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/dns-fuzz.html">dns-fuzz</a></td><td>53</td><td>dns, udp, tcp</td><td>fuzzer, intrusive</td></tr><tr><td><a href="https://nmap.org/nsedoc/scripts/dns-ip6-arpa-scan.html">dns-ip6-arpa-scan</a></td><td>–</td><td>–</td><td>intrusive, discovery</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pymysql的学习</title>
      <link href="/2021/07/04/pymysql-de-xue-xi/"/>
      <url>/2021/07/04/pymysql-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>内容来自互联网</p></blockquote><h1 id="python操作mysql之只看这篇就够了"><a href="#python操作mysql之只看这篇就够了" class="headerlink" title="python操作mysql之只看这篇就够了"></a>python操作mysql之只看这篇就够了</h1><h2 id="初始化准备"><a href="#初始化准备" class="headerlink" title="初始化准备"></a>初始化准备</h2><p>安装pymysql 包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo pip3 install PyMysql <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在mysql里创建数据库名称为 my_test, 用户名/密码也是 my_test , 并创建 Product 表如下: </p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP TABLE IF EXISTS &#96;Product&#96;;&#x2F;*!40101 SET @saved_cs_client     &#x3D; @@character_set_client *&#x2F;;&#x2F;*!40101 SET character_set_client &#x3D; utf8 *&#x2F;;CREATE TABLE &#96;Product&#96; (  &#96;id&#96; int NOT NULL AUTO_INCREMENT,  &#96;name&#96; varchar(40) NOT NULL,    &#x2F;* 商品名称 *&#x2F;  &#96;remark&#96; varchar(1000) NULL,  &#96;isBuy&#96; int(1) DEFAULT 1,  &#x2F;* 1: 在售 2:卖出 *&#x2F;  &#96;version&#96; int(11) NOT null default 1000,   PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1000 DEFAULT CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>pymysql 的代码还是很简单的, 以下代码分别为连接mysql 获得connection, 从connection 获得cursor 进行操作, 都是固定套路: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;import pymysqlhost &#x3D; &#39;localhost&#39;port &#x3D; 3306db &#x3D; &#39;mysql_test&#39;user &#x3D; &#39;mysql_test&#39;password &#x3D; &#39;mysql_test&#39;# ---- 用pymysql 操作数据库def get_connection():    conn &#x3D; pymysql.connect(host&#x3D;host, port&#x3D;port, db&#x3D;db, user&#x3D;user, password&#x3D;password)    return conndef check_it():    conn &#x3D; get_connection()    # 使用 cursor() 方法创建一个 dict 格式的游标对象 cursor    cursor &#x3D; conn.cursor(pymysql.cursors.DictCursor)    # 使用 execute()  方法执行 SQL 查询    cursor.execute(&quot;select count(id) as total from Product&quot;)    # 使用 fetchone() 方法获取单条数据.    data &#x3D; cursor.fetchone()    print(&quot;-- 当前数量: %d &quot; % data[&#39;total&#39;])    # 关闭数据库连接    cursor.close()    conn.close()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    check_it()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="pymysql-实战应用"><a href="#pymysql-实战应用" class="headerlink" title="pymysql 实战应用"></a>pymysql 实战应用</h1><h2 id="使用with-优化操作代码"><a href="#使用with-优化操作代码" class="headerlink" title="使用with 优化操作代码"></a>使用with 优化操作代码</h2><p>从以上代码可以看到, 如果每次都要打开连接, 关闭连接 …. 代码难看且容易出错. 最好的办法是用 python with 的方式来增加一个上下文管理器. 修改如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;import pymysqlfrom timeit import default_timerhost &#x3D; &#39;localhost&#39;port &#x3D; 3306db &#x3D; &#39;mysql_test&#39;user &#x3D; &#39;mysql_test&#39;password &#x3D; &#39;mysql_test&#39;# ---- 用pymysql 操作数据库def get_connection():    conn &#x3D; pymysql.connect(host&#x3D;host, port&#x3D;port, db&#x3D;db, user&#x3D;user, password&#x3D;password)    return conn# ---- 使用 with 的方式来优化代码class UsingMysql(object):    def __init__(self, commit&#x3D;True, log_time&#x3D;True, log_label&#x3D;&#39;总用时&#39;):        &quot;&quot;&quot;        :param commit: 是否在最后提交事务(设置为False的时候方便单元测试)        :param log_time:  是否打印程序运行总时间        :param log_label:  自定义log的文字        &quot;&quot;&quot;        self._log_time &#x3D; log_time        self._commit &#x3D; commit        self._log_label &#x3D; log_label    def __enter__(self):        # 如果需要记录时间        if self._log_time is True:            self._start &#x3D; default_timer()        # 在进入的时候自动获取连接和cursor        conn &#x3D; get_connection()        cursor &#x3D; conn.cursor(pymysql.cursors.DictCursor)        conn.autocommit &#x3D; False        self._conn &#x3D; conn        self._cursor &#x3D; cursor        return self    def __exit__(self, *exc_info):        # 提交事务        if self._commit:            self._conn.commit()        # 在退出的时候自动关闭连接和cursor        self._cursor.close()        self._conn.close()        if self._log_time is True:            diff &#x3D; default_timer() - self._start            print(&#39;-- %s: %.6f 秒&#39; % (self._log_label, diff))    @property    def cursor(self):        return self._cursordef check_it():    with UsingMysql(log_time&#x3D;True) as um:        um.cursor.execute(&quot;select count(id) as total from Product&quot;)        data &#x3D; um.cursor.fetchone()        print(&quot;-- 当前数量: %d &quot; % data[&#39;total&#39;])if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    check_it()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序运行结果如下: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 当前数量: 0 -- 用时: 0.002345 秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用这种方式改写代码之后, 业务方法更精简. 并且加了参数方便进行单元测试和监控代码的运行时间, 不亦美哉. </p><h2 id="封装公用代码"><a href="#封装公用代码" class="headerlink" title="封装公用代码"></a>封装公用代码</h2><p>现在新增一个pymysql_comm.py 类, 将连接代码和写好的UsingMysql 放进去, 代码如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;import pymysqlfrom timeit import default_timerhost &#x3D; &#39;localhost&#39;port &#x3D; 3306db &#x3D; &#39;mysql_test&#39;user &#x3D; &#39;mysql_test&#39;password &#x3D; &#39;mysql_test&#39;# ---- 用pymysql 操作数据库def get_connection():    conn &#x3D; pymysql.connect(host&#x3D;host, port&#x3D;port, db&#x3D;db, user&#x3D;user, password&#x3D;password)    return conn# ---- 使用 with 的方式来优化代码class UsingMysql(object):    def __init__(self, commit&#x3D;True, log_time&#x3D;True, log_label&#x3D;&#39;总用时&#39;):        &quot;&quot;&quot;        :param commit: 是否在最后提交事务(设置为False的时候方便单元测试)        :param log_time:  是否打印程序运行总时间        :param log_label:  自定义log的文字        &quot;&quot;&quot;        self._log_time &#x3D; log_time        self._commit &#x3D; commit        self._log_label &#x3D; log_label    def __enter__(self):        # 如果需要记录时间        if self._log_time is True:            self._start &#x3D; default_timer()        # 在进入的时候自动获取连接和cursor        conn &#x3D; get_connection()        cursor &#x3D; conn.cursor(pymysql.cursors.DictCursor)        conn.autocommit &#x3D; False        self._conn &#x3D; conn        self._cursor &#x3D; cursor        return self    def __exit__(self, *exc_info):        # 提交事务        if self._commit:            self._conn.commit()        # 在退出的时候自动关闭连接和cursor        self._cursor.close()        self._conn.close()        if self._log_time is True:            diff &#x3D; default_timer() - self._start            print(&#39;-- %s: %.6f 秒&#39; % (self._log_label, diff))    @property    def cursor(self):        return self._cursor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增一个 test.py 文件, 引入这个模块进行测试使用. 代码如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from pymysql_comm import UsingMysqldef check_it():    with UsingMysql(log_time&#x3D;True) as um:        um.cursor.execute(&quot;select count(id) as total from Product&quot;)        data &#x3D; um.cursor.fetchone()        print(&quot;-- 当前数量: %d &quot; % data[&#39;total&#39;])if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    check_it()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后续的学习和开发都可以使用这个封装类, 用类似test.py的方式来写自己的业务代码, 更方便精简了. </p><h1 id="增删改查api"><a href="#增删改查api" class="headerlink" title="增删改查api"></a>增删改查api</h1><p>下面记录了最常用的增删改查分页等方法</p><h2 id="新增单条记录"><a href="#新增单条记录" class="headerlink" title="新增单条记录"></a>新增单条记录</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from pymysql_comm import UsingMysqldef select_one(cursor):    cursor.execute(&quot;select * from Product&quot;)    data &#x3D; cursor.fetchone()    print(&quot;-- 单条记录: &#123;0&#125; &quot;.format(data))# 新增单条记录def create_one():    with UsingMysql(log_time&#x3D;True) as um:        sql &#x3D; &quot;insert into Product(name, remark) values(%s, %s)&quot;        params &#x3D; (&#39;男士双肩背包1&#39;, &#39;这个是非常好的背包&#39;)        um.cursor.execute(sql, params)        # 查看结果        select_one(um.cursor)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    create_one()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面代码里先增加了一条记录, 然后接着查看这条记录, 结果类似这样: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 单条记录: &#123;&#39;id&#39;: 1003, &#39;name&#39;: &#39;男士双肩背包1&#39;, &#39;isBuy&#39;: 1, &#39;remark&#39;: &#39;这个是非常好的背包&#39;&#125; -- 用时: 0.002600 秒<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>顺便吐嘈下, 用1秒/0.0026 可计算得出并发数是 384.6 , 这表示无优化状态下每秒插入记录 384 条左右, 性能比较低. </p><h2 id="新增多条记录"><a href="#新增多条记录" class="headerlink" title="新增多条记录"></a>新增多条记录</h2><p>一口气插入1000条记录, 同时加入查询方法, 如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from pymysql_comm import UsingMysqldef get_count(cursor):    cursor.execute(&quot;select count(id) as total from Product&quot;)    # 使用 fetchone() 方法获取单条数据.    data &#x3D; cursor.fetchone()    print(&quot;-- 当前数量: %d &quot; % data[&#39;total&#39;])def delete_all(cursor):    cursor.execute(&quot;delete from Product&quot;)# 插入 1000 条记录def create_many():    with UsingMysql(log_time&#x3D;True) as um:        # 清空之前的测试记录        delete_all(um.cursor)        for i in range(0, 1000):            sql &#x3D; &quot;insert into Product(name, remark) values(%s, %s)&quot;            params &#x3D; (&#39;男士双肩背包%d&#39; % i, &#39;这个是非常好的背包%d&#39; %i)            um.cursor.execute(sql, params)        # 查看结果        get_count(um.cursor)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    create_many()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在我的机器用时如下: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 当前数量: 1000 -- 用时: 0.097566 秒<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>勉强能接受. 现在用你的mysql 客户端查看数据库, 应该能看到1000条数据:<br><img src="https://upload-images.jianshu.io/upload_images/4074593-2c3be7db36889f37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="删除某条记录"><a href="#删除某条记录" class="headerlink" title="删除某条记录"></a>删除某条记录</h2><p>为了方便测试, 顺便把查的方法也提前写出来了. 代码如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from pymysql_comm import UsingMysqldef delete_one(cursor, name):    sql &#x3D; &#39;delete from Product where name &#x3D; %s&#39;    params &#x3D; name    cursor.execute(sql, params)    print(&#39;--- 已删除名字为%s的商品. &#39; % name)def select_one(cursor):    sql &#x3D; &#39;select * from Product&#39;    cursor.execute(sql)    data &#x3D; cursor.fetchone()    print(&#39;--- 已找到名字为%s的商品. &#39; % data[&#39;name&#39;])    return data[&#39;name&#39;]def select_one_by_name(cursor, name):    sql &#x3D; &#39;select * from Product where name &#x3D; %s&#39;    params &#x3D; name    cursor.execute(sql, params)    data &#x3D; cursor.fetchone()    if data:        print(&#39;--- 已找到名字为%s的商品. &#39; % data[&#39;name&#39;])    else:        print(&#39;--- 名字为%s的商品已经没有了&#39; % name)# 删除单条记录def check_delete_one():    with UsingMysql(log_time&#x3D;True) as um:        # 查找一条记录        name &#x3D; select_one(um.cursor)        # 删除之        delete_one(um.cursor, name)        # 查看还在不在?        select_one_by_name(um.cursor, name)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    check_delete_one()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>操作结果类似这样: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--- 已找到名字为男士双肩背包0的商品. --- 已删除名字为男士双肩背包0的商品. --- 名字为男士双肩背包0的商品已经没有了-- 用时: 0.015917 秒<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from pymysql_comm import UsingMysqldef update_by_pk(cursor, name, pk):    sql &#x3D; &quot;update Product set name &#x3D; &#39;%s&#39; where id &#x3D; %d&quot; % (name, pk)    cursor.execute(sql)def select_one(cursor):    sql &#x3D; &#39;select * from Product&#39;    cursor.execute(sql)    return cursor.fetchone()def select_one_by_name(cursor, name):    sql &#x3D; &#39;select * from Product where name &#x3D; %s&#39;    params &#x3D; name    cursor.execute(sql, params)    data &#x3D; cursor.fetchone()    if data:        print(&#39;--- 已找到名字为%s的商品. &#39; % data[&#39;name&#39;])    else:        print(&#39;--- 名字为%s的商品已经没有了&#39; % name)# 修改记录def check_update():    with UsingMysql(log_time&#x3D;True) as um:        # 查找一条记录        data &#x3D; select_one(um.cursor)        pk &#x3D; data[&#39;id&#39;]        print(&#39;--- 商品&#123;0&#125;: &#39;.format(data))        # 修改名字        new_name &#x3D; &#39;单肩包&#39;        update_by_pk(um.cursor, new_name, pk)        # 查看        select_one_by_name(um.cursor, new_name)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    check_update()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里记录了根据id修改记录的方法, 其他修改方式主要看sql 知识, 就不再赘述. </p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>查找主要涉及pymysql 的fetchone(返回单条数据), fetchall(返回所有数据) . fetchone 上面已经写过了, 现在来看看fetchall 方法: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from pymysql_comm import UsingMysqldef fetch_list_by_filter(cursor, pk):    sql &#x3D; &#39;select * from Product where id &gt; %d&#39; % pk    cursor.execute(sql)    data_list &#x3D; cursor.fetchall()    print(&#39;-- 总数: %d&#39; % len(data_list))    return data_list# 查找def fetch_list():    with UsingMysql(log_time&#x3D;True) as um:        # 查找id 大于800的记录        data_list &#x3D; fetch_list_by_filter(um.cursor, 800)        # 查找id 大于 10000 的记录        data_list &#x3D; fetch_list_by_filter(um.cursor, 10000)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    fetch_list()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果应该类似这样: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 总数: 999-- 总数: 0-- 用时: 0.012355 秒<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>分页查询主要是用了mysql 的limit 特性, 和pymysql 没太大关系, 代码如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from pymysql_comm import UsingMysqldef fetch_page_data(cursor, pk, page_size, skip):    sql &#x3D; &#39;select * from Product where id &gt; %d limit %d,%d&#39; % (pk, skip, page_size)    cursor.execute(sql)    data_list &#x3D; cursor.fetchall()    print(&#39;-- 总数: %d&#39; % len(data_list))    print(&#39;-- 数据: &#123;0&#125;&#39;.format(data_list))    return data_list# 查找def check_page():    with UsingMysql(log_time&#x3D;True) as um:        page_size &#x3D; 10        pk &#x3D; 500        for page_no in range(1, 6):            print(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 第%d页数据&#39; % page_no)            skip &#x3D; (page_no - 1) * page_size            fetch_page_data(um.cursor, pk, page_size, skip)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    check_page()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面列出了5页数据. 看起来大概是这样:<br><img src="https://upload-images.jianshu.io/upload_images/4074593-88b060c0ed04c737.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="中级篇-使用连接池和封装方法"><a href="#中级篇-使用连接池和封装方法" class="headerlink" title="中级篇: 使用连接池和封装方法"></a>中级篇: 使用连接池和封装方法</h1><p>经过一系列示例, 现在你应该会用pymysql 做最基本的增删改查分页了. 现在来看点高级点的功能: 更好的封装代码和使用数据库连接池. </p><h2 id="封装代码"><a href="#封装代码" class="headerlink" title="封装代码"></a>封装代码</h2><p>我们发觉调用pymysql的代码都差不多, 其实可以挪到公用方法里去, 新增一个 pymysql_lib_1.py 文件, 实现UsingMysql 如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;import pymysqlfrom timeit import default_timerhost &#x3D; &#39;localhost&#39;port &#x3D; 3306db &#x3D; &#39;mysql_test&#39;user &#x3D; &#39;mysql_test&#39;password &#x3D; &#39;mysql_test&#39;# ---- 用pymysql 操作数据库def get_connection():    conn &#x3D; pymysql.connect(host&#x3D;host, port&#x3D;port, db&#x3D;db, user&#x3D;user, password&#x3D;password)    return conn# ---- 使用 with 的方式来优化代码class UsingMysql(object):    def __init__(self, commit&#x3D;True, log_time&#x3D;True, log_label&#x3D;&#39;总用时&#39;):        &quot;&quot;&quot;        :param commit: 是否在最后提交事务(设置为False的时候方便单元测试)        :param log_time:  是否打印程序运行总时间        :param log_label:  自定义log的文字        &quot;&quot;&quot;        self._log_time &#x3D; log_time        self._commit &#x3D; commit        self._log_label &#x3D; log_label    def __enter__(self):        # 如果需要记录时间        if self._log_time is True:            self._start &#x3D; default_timer()        # 在进入的时候自动获取连接和cursor        conn &#x3D; get_connection()        cursor &#x3D; conn.cursor(pymysql.cursors.DictCursor)        conn.autocommit &#x3D; False        self._conn &#x3D; conn        self._cursor &#x3D; cursor        return self    def __exit__(self, *exc_info):        # 提交事务        if self._commit:            self._conn.commit()        # 在退出的时候自动关闭连接和cursor        self._cursor.close()        self._conn.close()        if self._log_time is True:            diff &#x3D; default_timer() - self._start            print(&#39;-- %s: %.6f 秒&#39; % (self._log_label, diff))    # &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 一系列封装的业务方法    # 返回 count    def get_count(self, sql, params&#x3D;None, count_key&#x3D;&#39;count(id)&#39;):        self.cursor.execute(sql, params)        data &#x3D; self.cursor.fetchone()        if not data:            return 0        return data[count_key]    def fetch_one(self, sql, params&#x3D;None):        self.cursor.execute(sql, params)        return self.cursor.fetchone()    def fetch_all(self, sql, params&#x3D;None):        self.cursor.execute(sql, params)        return self.cursor.fetchall()    def fetch_by_pk(self, sql, pk):        self.cursor.execute(sql, (pk,))        return self.cursor.fetchall()    def update_by_pk(self, sql, params&#x3D;None):        self.cursor.execute(sql, params)    @property    def cursor(self):        return self._cursor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后新增一个test2.py 文件进行测试, 如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from pymysql_lib_1 import UsingMysqldef check_it():    with UsingMysql(log_time&#x3D;True) as um:        sql &#x3D; &quot;select count(id) as total from Product&quot;        print(&quot;-- 当前数量: %d &quot; % um.get_count(sql, None, &#39;total&#39;))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    check_it()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到业务代码精简了不少, 拼sql 和参数就好了, 其他调用方法都封装到了上下文管理器. </p><h2 id="使用连接池"><a href="#使用连接池" class="headerlink" title="使用连接池"></a>使用连接池</h2><p>在上面的使用过程中, 每个请求都会开启一个数据库连接. 如果连接数太多, 数据库很快就会报错. 如何调整数据库的连接数增加并发性能算是个比较有技术含量的话题, 我打算放到高级篇里再介绍. 现在这里要让你知道的是: 数据库这么返回连接是不行的, 必须要使用连接池. </p><p>连接池代码当然不用自己动手, python的世界那么大~ 先安装DBUtils, 如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip3 install DBUtils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后新增 pymysql_lib.py , 增加代码如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;import pymysqlfrom timeit import default_timerfrom DBUtils.PooledDB import PooledDBclass DMysqlConfig:    &quot;&quot;&quot;        :param mincached:连接池中空闲连接的初始数量        :param maxcached:连接池中空闲连接的最大数量        :param maxshared:共享连接的最大数量        :param maxconnections:创建连接池的最大数量        :param blocking:超过最大连接数量时候的表现，为True等待连接数量下降，为false直接报错处理        :param maxusage:单个连接的最大重复使用次数        :param setsession:optional list of SQL commands that may serve to prepare            the session, e.g. [&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]        :param reset:how connections should be reset when returned to the pool            (False or None to rollback transcations started with begin(),            True to always issue a rollback for safety&#39;s sake)        :param host:数据库ip地址        :param port:数据库端口        :param db:库名        :param user:用户名        :param passwd:密码        :param charset:字符编码    &quot;&quot;&quot;    def __init__(self, host, db, user, password, port&#x3D;3306):        self.host &#x3D; host        self.port &#x3D; port        self.db &#x3D; db        self.user &#x3D; user        self.password &#x3D; password        self.charset &#x3D; &#39;UTF8&#39;  # 不能是 utf-8        self.minCached &#x3D; 10        self.maxCached &#x3D; 20        self.maxShared &#x3D; 10        self.maxConnection &#x3D; 100        self.blocking &#x3D; True        self.maxUsage &#x3D; 100        self.setSession &#x3D; None        self.reset &#x3D; True# ---- 用连接池来返回数据库连接class DMysqlPoolConn:    __pool &#x3D; None    def __init__(self, config):        if not self.__pool:            self.__class__.__pool &#x3D; PooledDB(creator&#x3D;pymysql,                                             maxconnections&#x3D;config.maxConnection,                                             mincached&#x3D;config.minCached,                                             maxcached&#x3D;config.maxCached,                                             maxshared&#x3D;config.maxShared,                                             blocking&#x3D;config.blocking,                                             maxusage&#x3D;config.maxUsage,                                             setsession&#x3D;config.setSession,                                             charset&#x3D;config.charset,                                             host&#x3D;config.host,                                             port&#x3D;config.port,                                             database&#x3D;config.db,                                             user&#x3D;config.user,                                             password&#x3D;config.password,                                             )    def get_conn(self):        return self.__pool.connection()# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 在程序的开始初始化一个连接池host &#x3D; &#39;localhost&#39;port &#x3D; 3306db &#x3D; &#39;mysql_test&#39;user &#x3D; &#39;mysql_test&#39;password &#x3D; &#39;mysql_test&#39;db_config &#x3D; DMysqlConfig(host, db, user, password, port)g_pool_connection &#x3D; DMysqlPoolConn(db_config)# ---- 使用 with 的方式来优化代码class UsingMysql(object):    def __init__(self, commit&#x3D;True, log_time&#x3D;True, log_label&#x3D;&#39;总用时&#39;):        &quot;&quot;&quot;        :param commit: 是否在最后提交事务(设置为False的时候方便单元测试)        :param log_time:  是否打印程序运行总时间        :param log_label:  自定义log的文字        &quot;&quot;&quot;        self._log_time &#x3D; log_time        self._commit &#x3D; commit        self._log_label &#x3D; log_label    def __enter__(self):        # 如果需要记录时间        if self._log_time is True:            self._start &#x3D; default_timer()        # 从连接池获取数据库连接        conn &#x3D; g_pool_connection.get_conn()        cursor &#x3D; conn.cursor(pymysql.cursors.DictCursor)        conn.autocommit &#x3D; False        self._conn &#x3D; conn        self._cursor &#x3D; cursor        return self    def __exit__(self, *exc_info):        # 提交事务        if self._commit:            self._conn.commit()        # 在退出的时候自动关闭连接和cursor        self._cursor.close()        self._conn.close()        if self._log_time is True:            diff &#x3D; default_timer() - self._start            print(&#39;-- %s: %.6f 秒&#39; % (self._log_label, diff))    # &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 一系列封装的业务方法    # 返回 count    def get_count(self, sql, params&#x3D;None, count_key&#x3D;&#39;count(id)&#39;):        self.cursor.execute(sql, params)        data &#x3D; self.cursor.fetchone()        if not data:            return 0        return data[count_key]    def fetch_one(self, sql, params&#x3D;None):        self.cursor.execute(sql, params)        return self.cursor.fetchone()    def fetch_all(self, sql, params&#x3D;None):        self.cursor.execute(sql, params)        return self.cursor.fetchall()    def fetch_by_pk(self, sql, pk):        self.cursor.execute(sql, (pk,))        return self.cursor.fetchall()    def update_by_pk(self, sql, params&#x3D;None):        self.cursor.execute(sql, params)    @property    def cursor(self):        return self._cursor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新增加的一大坨代码看起来很多, 其实只是增加了两个配置类. 同时在这里: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 在程序的开始初始化一个连接池host &#x3D; &#39;localhost&#39;port &#x3D; 3306db &#x3D; &#39;mysql_test&#39;user &#x3D; &#39;mysql_test&#39;password &#x3D; &#39;mysql_test&#39;db_config &#x3D; DMysqlConfig(host, db, user, password, port)g_pool_connection &#x3D; DMysqlPoolConn(db_config)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例化了连接池.  后续的上下文管理器改从连接池获取连接, 其他代码都不变. </p><p>把这个pymysql_lib 存好, 以后有机会慢慢增加/修改里面的各种fetch/update … 方法, 这个文件会变成你的传家宝, 你会用它和mysql 打交道很多很多年… </p><h1 id="最后的严肃问题-raw-sql-使用或放弃"><a href="#最后的严肃问题-raw-sql-使用或放弃" class="headerlink" title="最后的严肃问题: raw sql ? 使用或放弃?"></a>最后的严肃问题: raw sql ? 使用或放弃?</h1><p>从UsingMysql 可以看出代码优化到这个层面已经到头了. 可是那些什么insert 语句, update 语句还是要拼一大堆sql 字段, 怎么办? 这里有两个办法: 一个是思考一些代码生成技术, 根据各种参数自动组装sql, 这样下去这代码就会变成自己独有的orm了(年轻时我就这么干) . 另一个选择(也就是我现在的选择), 不用pymysql, 而是使用sqlalchemy ….  :-D :-D :-D </p><p>我现在工作中很少用Mysql , 通常用到的时候都是接手别人的代码. 所以我一般这么做: 简单无性能瓶颈的业务代码, 我用sqlalchemy 不用动脑子. 有性能瓶颈的地方, 我用pymysql原生sql进行操作. 因为pymysql 网上很少成型的好文章, 所以我才写了这么一大坨进行总结. </p><h2 id="sqlchemy-入门"><a href="#sqlchemy-入门" class="headerlink" title="sqlchemy 入门"></a>sqlchemy 入门</h2><p>新增一个 sqlal_comm.py 类, 代码如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, String, ForeignKey, UniqueConstraint, Index, Textfrom sqlalchemy.orm import sessionmaker, relationshipfrom sqlalchemy import create_enginefrom timeit import default_timerhost &#x3D; &#39;localhost&#39;port &#x3D; 3306db &#x3D; &#39;mysql_test&#39;user &#x3D; &#39;mysql_test&#39;password &#x3D; &#39;mysql_test&#39;g_mysql_url &#x3D; &#39;mysql+pymysql:&#x2F;&#x2F;%s:%s@%s:%d&#x2F;%s&#39; % (user, password, host, port, db)engine &#x3D; create_engine(g_mysql_url)Base &#x3D; declarative_base()class Product(Base):    __tablename__ &#x3D; &#39;Product&#39;    id &#x3D; Column(Integer, primary_key&#x3D;True, autoincrement&#x3D;True)    name &#x3D; Column(String(40))    remark &#x3D; Column(String(1000), nullable&#x3D;True)    isBuy &#x3D; Column(Integer, default&#x3D;1)Base.metadata.create_all(engine)  #创建表Session &#x3D; sessionmaker(bind&#x3D;engine)# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 以上为初始化数据库和表# ---- 使用 with 的方式来优化代码class UsingAlchemy(object):    def __init__(self, commit&#x3D;True, log_time&#x3D;True, log_label&#x3D;&#39;总用时&#39;):        &quot;&quot;&quot;        :param commit: 是否在最后提交事务(设置为False的时候方便单元测试)        :param log_time:  是否打印程序运行总时间        :param log_label:  自定义log的文字        &quot;&quot;&quot;        self._log_time &#x3D; log_time        self._commit &#x3D; commit        self._log_label &#x3D; log_label        self._session &#x3D; Session()    def __enter__(self):        # 如果需要记录时间        if self._log_time is True:            self._start &#x3D; default_timer()        return self    def __exit__(self, *exc_info):        # 提交事务        if self._commit:            self._session.commit()        if self._log_time is True:            diff &#x3D; default_timer() - self._start            print(&#39;-- %s: %.6f 秒&#39; % (self._log_label, diff))    @property    def session(self):        return self._session<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个文件分为两大部分: 上部分是 sqlalchemy 的固定套路: 拼接连接字符串, 进行连接初始化, 然后初始化数据库的表.  下部分是继续之前的上下文管理套路, 让代码编写更轻松点. </p><p>新增一个test4.py 进行测试, 如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from sqlal_comm import Session, Product, UsingAlchemy# 测试获取一条记录def check_it():    session &#x3D; Session()    result &#x3D; session.query(Product).first()    if result is None:        session.commit()        return None    session.commit()    session.close()    print(&#39;-- 得到记录: &#123;0&#125;&#39;.format(result))# 测试获取一条记录def check_it_2():    with UsingAlchemy() as ua:        result &#x3D; ua.session.query(Product).first()        print(&#39;-- 得到记录: &#123;0&#125;&#39;.format(result))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    check_it()    check_it_2()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个文件用两种方式来进行调用, 显然用了上下文管理的方式会更轻松点. </p><h2 id="sqlalchemy-条件查询和分页"><a href="#sqlalchemy-条件查询和分页" class="headerlink" title="sqlalchemy 条件查询和分页"></a>sqlalchemy 条件查询和分页</h2><p>有一篇博客极好, 把增删改查总结得明明白白. 所以我也偷懒了, 在最后直接放出他的文章. 我这里来补充两个他没有写的: 条件查询和分页查询. </p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>主要的业务场景就是: 用户传入多个参数, 要根据参数的不同构造不同的查询条件. 新增一个python文件, 如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from sqlal_comm import Session, Product, UsingAlchemyis_available &#x3D; 1# 重新插入数据def re_insert_data():    with UsingAlchemy() as ua:        # 删除所有数据        ua.session.query(Product).filter(Product.id &gt; 0).delete()        data_list &#x3D; []        for i in range(0, 10):            data &#x3D; Product()            data.name &#x3D; &#39;双肩包%d&#39; % i            data.remark &#x3D; &#39;双肩包%d&#39; % i            data.isBuy &#x3D; is_available            data_list.append(data)        # 批量增加数据        ua.session.add_all(data_list)# 测试条件查询def check_search(keyword):    re_insert_data()    with UsingAlchemy() as ua:        # 多条件的列表组合        query_filter &#x3D; []        if keyword:            like_value &#x3D; &#39;%&#123;&#125;%&#39;.format(keyword)            # 查询 name 和 remark 字段里 包含查询关键词的记录            query_filter.append(Product.name.like(like_value) | Product.remark.like(like_value))        # 增加另一个查询条件作为测试        query_filter.append(Product.isBuy &#x3D;&#x3D; is_available)        # 查找结果        data_list &#x3D; ua.session.query(Product).filter(*query_filter).all()        print(&#39;-- 记录条数: &#123;&#125;&#39;.format(len(data_list)))        print(&#39;-- 该记录是: %s&#39; % data_list[0].name)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    check_search(3)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个文件的演示分两步: </p><ol><li>删除原来数据库的数据, 插入10条新的测试数据. 这样能确保肯定有一条带关键字3的数据. </li><li>演示了如何组合查询条件进行查找, 其中有一个带or的查找条件. 从这个例子入手, 所有查询对你都不是难题了. </li></ol><p>程序运行结果应该类似这样: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 总用时: 0.009106 秒-- 记录条数: 1-- 该记录是: 双肩包3-- 总用时: 0.001323 秒<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="分页查找"><a href="#分页查找" class="headerlink" title="分页查找"></a>分页查找</h2><p>增加一个新的python文件, 代码如下: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! &#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-&quot;&quot;&quot;    作者: 小肥巴巴    简书: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;db796a501972    邮箱: imyunshi@163.com    github: https:&#x2F;&#x2F;github.com&#x2F;xiaofeipapa&#x2F;python_example    您可以任意转载, 恳请保留我作为原作者, 谢谢.&quot;&quot;&quot;from sqlal_comm import Session, Product, UsingAlchemyis_available &#x3D; 1# 重新插入数据def re_insert_data():    with UsingAlchemy() as ua:        # 删除所有数据        ua.session.query(Product).filter(Product.id &gt; 0).delete()        data_list &#x3D; []        for i in range(0, 10):            data &#x3D; Product()            data.name &#x3D; &#39;双肩包%d&#39; % i            data.remark &#x3D; &#39;双肩包%d&#39; % i            data.isBuy &#x3D; is_available            data_list.append(data)        # 批量增加数据        ua.session.add_all(data_list)# 测试分页查找def check_search(page_no, page_size):    re_insert_data()    with UsingAlchemy() as ua:        # 多条件的列表组合        query_filter &#x3D; list()        # 增加另一个查询条件作为测试        query_filter.append(Product.isBuy &#x3D;&#x3D; is_available)        offset &#x3D; (page_no - 1) * page_size        # 查找结果        data_list &#x3D; ua.session.query(Product).filter(*query_filter).limit(page_size).offset(offset).all()        print(&#39;&#x3D;&#x3D;&#x3D; 记录条数: &#123;&#125;&#39;.format(len(data_list)))        for data in data_list:            print(&#39;-- 记录: &#39; + data.name)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    page_size &#x3D; 5    for page_no in range(1, 3):        check_search(page_no, page_size)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到分页查找就是在获取列表之前调用limit 和 offset 方法, 也就是这句: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data_list &#x3D; ua.session.query(Product).filter(*query_filter).limit(page_size).offset(offset).all()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以 , 也是很简单的. </p><h2 id="sqlalchemy-增删改查总结"><a href="#sqlalchemy-增删改查总结" class="headerlink" title="sqlalchemy 增删改查总结"></a>sqlalchemy 增删改查总结</h2><p>这篇文章写得很好了, 看这里吧: <a href="https://www.cnblogs.com/pycode/p/mysql-orm.html">https://www.cnblogs.com/pycode/p/mysql-orm.html</a></p><h1 id="最后-这次真的是最后了"><a href="#最后-这次真的是最后了" class="headerlink" title="最后, 这次真的是最后了"></a>最后, 这次真的是最后了</h1><p>python 使用mysql 的基础知识就总结到这了. 等有时间我再写关于事务锁和优化并发性能的高级篇. </p><p>少年, 给个star 再走啊~~</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红队中易被攻击的一些重点系统漏洞整理</title>
      <link href="/2021/07/03/hong-dui-zhong-yi-bei-gong-ji-de-yi-xie-chong-dian-xi-tong-lou-dong-zheng-li/"/>
      <url>/2021/07/03/hong-dui-zhong-yi-bei-gong-ji-de-yi-xie-chong-dian-xi-tong-lou-dong-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="红队中易被攻击的一些重点系统漏洞整理"><a href="#红队中易被攻击的一些重点系统漏洞整理" class="headerlink" title="红队中易被攻击的一些重点系统漏洞整理"></a>红队中易被攻击的一些重点系统漏洞整理</h1><p>以下时间为更新时间，不代表漏洞发现时间.带 ⚒️图标的为工具URL.</p><p>配合EHole(棱洞)-红队重点攻击系统指纹探测工具使用效果更佳：<a href="https://github.com/EdgeSecurityTeam/EHole">https://github.com/EdgeSecurityTeam/EHole</a></p><p>此项目同步至：<a href="https://forum.ywhack.com/bountytips.php?Vulnerability">https://forum.ywhack.com/bountytips.php?Vulnerability</a></p><h2 id="一、OA系统"><a href="#一、OA系统" class="headerlink" title="一、OA系统"></a>一、OA系统</h2><blockquote><p>泛微(Weaver-Ecology-OA)</p></blockquote><ul><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/6560">泛微OA E-cology RCE(CNVD-2019-32204)</a> - 影响版本7.0/8.0/8.1/9.0</li><li>[2021.01.07] - <a href="https://zhuanlan.zhihu.com/p/86082614">泛微OA WorkflowCenterTreeData接口注入(限oracle数据库)</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/whoami101/p/13361254.html">泛微ecology OA数据库配置信息泄露</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/yuzly/p/13677238.html">泛微OA云桥任意文件读取</a> - 影响2018-2019 多个版本</li><li>[2021.01.07] - <a href="https://www.cnblogs.com/ffx1/p/12653555.html">泛微 e-cology OA 前台SQL注入漏洞</a></li><li>[2021.01.07] - <a href="https://www.seebug.org/vuldb/ssvid-91089">泛微OA系统 com.eweaver.base.security.servlet.LoginAction 参数keywordid SQL注入漏洞</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/whoami101/p/13361254.html">泛微 OA sysinterface/codeEdit.jsp 页面任意文件上传</a></li><li>[2021.01.07] - <a href="https://www.seebug.org/vuldb/ssvid-90524">泛微ecology OA数据库配置信息泄露</a></li></ul><blockquote><p>致远(Seeyon)</p></blockquote><ul><li>[2021.01.07] - <a href="https://www.cnblogs.com/nul1/p/12803555.html">致远 OA A8 htmlofficeservlet getshell 漏洞</a></li><li>[2021.01.07] - <a href="https://www.zhihuifly.com/t/topic/3345">致远OA Session泄漏漏洞</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/AtesetEnginner/p/12106741.html">致远OA A6 search_result.jsp sql注入漏洞</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/AtesetEnginner/p/12106741.html">致远OA A6 setextno.jsp sql注入漏洞</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/AtesetEnginner/p/12106741.html">致远OA A6 重置数据库账号密码漏洞</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/AtesetEnginner/p/12106741.html">致远OA A8 未授权访问</a></li><li>[2021.01.07] - <a href="http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0104942">致远OA A8-v5 任意用户密码修改</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/AtesetEnginner/p/12106741.html">致远OA A8-m 后台万能密码</a></li><li>[2021.01.07] - <a href="https://landgrey.me/blog/8/">致远OA 帆软报表组件 前台XXE漏洞</a></li><li>[2021.01.07] - <a href="https://landgrey.me/blog/7/">致远OA帆软报表组件反射型XSS&amp;SSRF漏洞</a> - Thanks:@LandGrey</li></ul><blockquote><p>蓝凌OA</p></blockquote><ul><li>[2021.01.07] - 暂无(希望大佬能提供) </li></ul><blockquote><p>通达OA(TongDa OA)</p></blockquote><ul><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/8430">通达OA任意文件删除&amp;文件上传RCE分析(2020年hw 8月0day)</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/7437">通达OA任意文件上传/文件包含GetShell</a></li><li>[2021.01.07] - <a href="http://www.adminxe.com/1095.html">通达OA &lt;11.5版本 任意用户登录</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/yuzly/p/13606314.html">通达OA 11.2后台getshell</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/yuzly/p/13690737.html">通达OA 11.7 后台sql注入getshell漏洞</a></li><li>[2021.03.06] - <a href="https://mp.weixin.qq.com/s/LJRI04VViL4hbt6dbmGHAw">通达OA 11.7 未授权RCE</a></li><li>[2021.03.09] - <a href="https://paper.seebug.org/1499/">通达OA 11.8 后台低权限Getshell</a></li><li>[2021.03.07] - ⚒️<a href="https://github.com/xinyu2428/TDOA_RCE">TDOA_RCE 通达OA综合利用工具</a></li></ul><blockquote><p>金蝶OA(Kingdee OA)</p></blockquote><ul><li>[2021.01.07] - <a href="https://www.seebug.org/vuldb/ssvid-93826">金蝶协同办公系统 GETSHELL漏洞</a></li></ul><h2 id="二、E-mail"><a href="#二、E-mail" class="headerlink" title="二、E-mail"></a>二、E-mail</h2><blockquote><p>Exchange</p></blockquote><ul><li>[2021.01.07] - <a href="https://srcincite.io/advisories/src-2020-0025/">CVE-2020-17083 Microsoft Exchange Server 远程执行代码漏洞</a></li><li>[2021.01.07] - <a href="https://github.com/rapid7/metasploit-framework/pull/14126">Microsoft Exchange远程代码执行漏洞（CVE-2020-16875）</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/7321">CVE-2020-0688_微软EXCHANGE服务的远程代码执行漏洞</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/3670">Microsoft Exchange任意用户伪造漏洞</a></li><li>[2021.03.08] - ⚒️<a href="https://github.com/GreyOrder/CVE-2021-26855">Microsoft Exchange SSRF（CVE-2021-26855）</a></li><li>[2021.01.07] - <a href="https://sploitus.com/?query=Exchange#exploits">Exchange 历史漏洞合集</a></li><li>[2021.03.10] - <a href="https://www.praetorian.com/blog/reproducing-proxylogon-exploit/">Microsoft Exchange Proxylogon漏洞利用链</a></li></ul><blockquote><p>Coremail</p></blockquote><ul><li>[2021.01.07] - <a href="https://www.lsablog.com/networksec/penetration/coremail-info-leakage-and-webservice-unauthorization-reproduce/">Coremail 配置信息泄露及接口未授权漏洞</a></li><li>[2021.01.07] - <a href="https://www.seebug.org/vuldb/ssvid-94754">Coremail 存储型XSS漏洞</a></li><li>[2021.01.07] - <a href="https://sploitus.com/?query=Coremail#exploits">Coremail 历史漏洞合集</a></li></ul><h2 id="三、Web中间件"><a href="#三、Web中间件" class="headerlink" title="三、Web中间件"></a>三、Web中间件</h2><blockquote><p>Apache</p></blockquote><ul><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/4422">Apache Solr RCE—【CVE-2019-0192】</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/4452">CVE-2018-1335：Apache Tika 命令注入</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/5513">Apache Axis1（&lt;=1.4版本） RCE</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/54">Tomcat信息泄漏和远程代码执行漏洞【CVE-2017-12615/CVE-2017-12616】</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/7683">Tomcat Ghostcat - AJP协议文件读取/文件包含漏洞</a></li><li>[2021.01.07] - <a href="https://github.com/pyn3rd/CVE-2019-0232">Tomcat全版本命令执行漏洞 CVE-2019-0232</a></li><li>[2021.01.07] - <a href="https://blog.csdn.net/weixin_43071873/article/details/109532160">Tomcat后台部署war木马getshell</a></li><li>[2021.01.07] - <a href="https://blog.csdn.net/jlvsjp/article/details/52776377">CVE-2016-1240 Tomcat本地提权漏洞</a></li><li>[2021.01.07] - <a href="https://sploitus.com/?query=tomcat#exploits">Tomcat历史漏洞合集</a></li></ul><blockquote><p>Weblogic</p></blockquote><ul><li>[2021.01.07] - <a href="https://github.com/jas502n/CVE-2020-14882">CVE-2020-14882 Weblogic 未授权绕过RCE</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/5024">Weblogic 远程命令执行漏洞分析(CVE-2019-2725)</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/lijingrong/p/13049569.html">CVE-2019-2618任意文件上传漏洞</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/xiaozi/p/8205107.html">WebLogic XMLDecoder反序列化漏洞（CVE-2017-10271）</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/5078">Weblogic任意文件读取漏洞（CVE-2019-2615)与文件上传漏洞（CVE-2019-2618）</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/8155">Weblogic coherence组件iiop反序列化漏洞 (CVE-2020-14644)</a></li><li>[2021.03.07] - <a href="https://github.com/Y4er/CVE-2020-14756">WebLogic CVE-2020-14756 T3/IIOP 反序列化RCE</a></li><li>[2021.03.07] - <a href="https://forum.ywhack.com/viewthread.php?tid=115007">Weblogic Server远程代码执行漏洞(CVE-2021-2109)</a></li><li>[2021.01.07] - <a href="https://sploitus.com/?query=weblogic#exploits">Weblogic历史漏洞合集</a></li><li>[2021.03.09] - ⚒️<a href="https://github.com/rabbitmask/WeblogicScan">WeblogicScan Weblogic一键漏洞检测工具</a></li></ul><blockquote><p>JBoss</p></blockquote><ul><li>[2021.01.07] - <a href="https://www.cnblogs.com/null1433/p/12704908.html">CVE-2017-7504-JBoss JMXInvokerServlet 反序列化</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/kuaile1314/p/12060366.html">JBoss 5.x/6.x 反序列化漏洞（CVE-2017-12149）</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/iamver/p/11282928.html">JBoss 4.x JBossMQ JMS 反序列化漏洞（CVE-2017-7504）</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/Safe3/archive/2010/01/08/1642371.html">JBOSS远程代码执行漏洞</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/rnss/p/13377321.html">JBoss JMX Console未授权访问Getshell</a></li><li>[2021.01.07] - <a href="https://sploitus.com/?query=JBoss#exploits">JBoss历史漏洞合集</a></li><li>[2021.03.10] - ⚒️<a href="https://github.com/GGyao/jbossScan">JbossScan 一个简单探测jboss漏洞的工具</a></li></ul><h2 id="四、源代码管理"><a href="#四、源代码管理" class="headerlink" title="四、源代码管理"></a>四、源代码管理</h2><blockquote><p>GitLab</p></blockquote><ul><li>[2021.01.07] - <a href="https://github.com/thewhiteh4t/cve-2020-10977">GitLab任意文件读取漏洞 CVE-2020-10977</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/2661">GitLab 远程代码执行漏洞 -【CVE-2018-14364】</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/393">GitLab 任意文件读取 (CVE-2016-9086) 和任意用户token泄露漏洞</a></li><li>[2021.01.07] - <a href="https://sploitus.com/?query=Gitlab#exploits">GitLab历史漏洞合集</a></li></ul><blockquote><p>SVN</p></blockquote><ul><li>[2021.01.07] - <a href="https://blog.csdn.net/qq_36869808/article/details/88846945">SVN源码泄露漏洞</a></li><li>[2021.03.09] - ⚒️<a href="https://github.com/admintony/svnExploit">svnExploit 支持SVN源代码泄露全版本Dump源码</a></li></ul><h2 id="五、项目管理系统"><a href="#五、项目管理系统" class="headerlink" title="五、项目管理系统"></a>五、项目管理系统</h2><blockquote><p>禅道</p></blockquote><ul><li>[2021.01.07] - <a href="https://www.4hou.com/posts/VoOW">【组件攻击链】禅道项目管理系统(ZenTaoPMS)高危漏洞分析与利用</a></li><li>[2021.01.07] - <a href="https://blog.csdn.net/qq_36197704/article/details/109385695">CNVD-C-2020-121325 禅道开源版文件上传漏洞</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/171/">禅道9.1.2 免登陆SQL注入漏洞</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/ly584521/p/13962816.html">禅道 ≤ 12.4.2 后台管理员权限Getshell</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/186">禅道9.1.2 权限控制逻辑漏洞</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/188">禅道826版本一定条件getshell</a></li><li>[2021.01.07] - <a href="https://anquan.baidu.com/article/996">禅道远程代码执行漏洞</a></li><li>[2021.01.07] - <a href="https://wiki.bylibrary.cn/01-CMS%E6%BC%8F%E6%B4%9E/%E7%A6%85%E9%81%93/%E7%A6%85%E9%81%9311.6%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/">禅道11.6任意文件读取</a></li></ul><blockquote><p>Jira</p></blockquote><ul><li>[2021.01.07] - <a href="https://caiqiqi.github.io/2019/11/03/Atlassian-Jira%E6%BC%8F%E6%B4%9E%E5%A4%A7%E6%9D%82%E7%83%A9/">Atlassian Jira漏洞大杂烩</a></li><li>[2021.01.07] - <a href="https://cloud.tencent.com/developer/article/1529135">Jira服务工作台路径遍历导致的敏感信息泄露漏洞（CVE-2019-14994）</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/backlion/p/11608371.html">Jira未授权SSRF漏洞(CVE-2019-8451)</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/backlion/p/11608439.html">Atlassian JIRA服务器模板注入漏洞（CVE-2019-11581）</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/7219">CVE-2019-8449 JIRA 信息泄漏漏洞</a></li><li>[2021.01.07] - ⚒️<a href="https://twitter.com/harshbothra_/status/1346109605756116995">遇到Jira时可以尝试的一些CVE</a></li><li>[2021.01.07] - <a href="https://sploitus.com/?query=Jira#exploits">Jira历史漏洞合集</a></li></ul><h2 id="六、数据库"><a href="#六、数据库" class="headerlink" title="六、数据库"></a>六、数据库</h2><ul><li>[2021.03.09] - ⚒️<a href="https://github.com/SafeGroceryStore/MDAT">MDAT 多种主流的数据库攻击利用工具</a></li></ul><blockquote><p>Redis</p></blockquote><ul><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/256">Redis未授权访问漏洞利用总结</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/5616">Redis 4.x RCE</a></li><li>[2021.01.07] - <a href="https://www.webshell.cc/5154.html">redis利用姿势收集</a></li><li>[2021.01.07] - <a href="https://sploitus.com/?query=redis#exploits">Redis历史漏洞合集</a></li><li>[2021.03.08] - ⚒️<a href="https://github.com/r35tart/RedisWriteFile">通过 Redis 主从写出无损文件</a></li></ul><blockquote><p>Mysql</p></blockquote><ul><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/1122">Mysql提权(CVE-2016-6663、CVE-2016-6664组合实践)</a></li><li>[2021.01.07] - <a href="https://blog.csdn.net/itfly8/article/details/100890881">Mysql数据库渗透及漏洞利用总结</a></li><li>[2021.01.07] - <a href="https://www.cnblogs.com/ichunqiu/p/9604564.html">Mysql 注入专辑</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/2199">高版本MySQL之UDF提权</a></li><li>[2021.03.08] - <a href="https://sploitus.com/?query=mysql#exploits">Mysql历史漏洞合集</a></li></ul><blockquote><p>Mssql</p></blockquote><ul><li>[2021.01.07] - <a href="https://forum.ywhack.com/thread-114737-1-1.html">Mssql利用姿势整理(整理的比较全)</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/7534">Mssql数据库命令执行总结</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/8195">利用mssql模拟登录提权</a></li><li>[2021.01.07] - <a href="https://xz.aliyun.com/t/8513">高级的MSSQL注入技巧</a></li><li>[2021.03.08] - <a href="https://xz.aliyun.com/t/6682">MSSQL使用CLR程序集来执行命令</a></li></ul><h2 id="七、开源运维监控"><a href="#七、开源运维监控" class="headerlink" title="七、开源运维监控"></a>七、开源运维监控</h2><blockquote><p>Jenkins</p></blockquote><ul><li>[2021.03.10] -  <a href="https://blog.csdn.net/caiqiiqi/article/details/96431428">Jenkins 路径遍历任意文件写入漏洞（CVE-2019-10352）</a></li><li>[2021.03.10] -  <a href="https://www.cnblogs.com/paperpen/p/11626231.html">Jenkins Git client插件命令执行漏洞(CVE-2019-10392)</a></li><li>[2021.03.10] -  <a href="https://sploitus.com/?query=Jenkins#exploits">Jenkins 历史漏洞利用程序</a></li></ul><blockquote><p>Zabbix</p></blockquote><ul><li>[2021.03.10] -  <a href="https://xz.aliyun.com/t/8991">CVE-2020-11800 Zabbix 远程代码执行漏洞</a></li><li>[2021.03.10] -  <a href="https://www.horizon3.ai/disclosures/zabbix-csrf-to-rce">Zabbix 中的CSRF到RCE（CVE-2021-27927）</a></li><li>[2021.03.10] -  <a href="https://www.exploit-db.com/exploits/39937">Zabbix 2.2 - 3.0.3 远程代码执行漏洞</a></li><li>[2021.03.10] -  <a href="https://www.seebug.org/vuldb/ssvid-92245">Zabbix Agent 3.0.1 mysql.size shell命令注入 (CVE-2016-4338)</a></li><li>[2021.03.10] -  <a href="https://sploitus.com/?query=Zabbix#exploits">Zabbix 历史漏洞利用程序</a></li></ul><blockquote><p>Nagios</p></blockquote><ul><li>[2021.03.10] -  <a href="https://code610.blogspot.com/2019/12/postauth-rce-in-latest-nagiosxi.html">Nagios XI 5.6.9 远程代码执行漏洞（CVE-2019-20197）</a></li><li>[2021.03.10] -  <a href="https://github.com/fs0c-sh/nagios-xi-5.7.5-bugs">nagios-xi-5.7.5 多个漏洞（CVE-2021-25296~99）</a></li><li>[2021.03.10] -  <a href="https://gist.github.com/leommxj/93edce6f8572cefe79a3d7da4389374e">Nagios 代码注入漏洞 (CVE-2021-3273)</a></li><li>[2021.03.10] -  <a href="https://www.shielder.it/blog/2019/04/nagios-xi-5.5.10-xss-to-/">Nagios XI 5.5.10: XSS to RCE</a></li><li>[2021.03.10] -  <a href="https://sploitus.com/?query=Nagios#exploits">Nagios 历史漏洞利用程序</a></li></ul><h2 id="八、堡垒机"><a href="#八、堡垒机" class="headerlink" title="八、堡垒机"></a>八、堡垒机</h2><blockquote><p>JumpServer</p></blockquote><ul><li>[2021.03.10] -  <a href="https://www.o2oxy.cn/2921.html">JumpServer远程执行漏洞(2021.01)</a></li></ul><blockquote><p>齐治堡垒机</p></blockquote><ul><li>[2021.03.10] -  <a href="https://www.seebug.org/vuldb/ssvid-98383">齐治堡垒机未授权RCE</a></li><li>[2021.03.10] -  <a href="https://forum.ywhack.com/viewthread.php?tid=1523">齐治堡垒机远程代码执行</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 红队 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料收集 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
